name: CD - Nightly

on:
  push:
    branches:
      - "development"
    # nightly releases should only stem from related tags. No auto checks for now though, only branch protection for nightly env.
    # tags:
    #   - v*.*.*-nightly*

jobs:
  web-app:
    if: "! startsWith(github.event.head_commit.message, '[CI Skip]')"
    environment: nightly
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: nightly
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      # Repeat Build Setup. Separate terminal outs.
      - run: yarn install --immutable
      - run: yarn lint
      # Configure app specially for nightly env
      - name: Configure, build, and tar.
        run: |
          node ./scripts/frontend_env_set.cjs
          yarn build
          tar -cvf web-app-nightly-build.tar ./build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-app-nightly-build
          files: |
            web-app-nightly-build.tar
      - name: Deploy to firebase hosting
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ALIAS }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  servers:
    runs-on: ubuntu-latest
    environment: nightly
    # Oidc perms.
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      matrix:
        server: ['polkadot-apac-hackathon/auth-server']
    # All scripts run in server wd.
    defaults:
      run:
        working-directory: ${{ matrix.server }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      # Build and upload tar
      - run: | 
          npm install -g npm@7
          npm install
          sh ./scripts/gcloud.sh
      - run: node ./scripts/do-tar.cjs
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: '${{ env.ARTIFACT_NAME }}'
          path: ./server-*.tar
        # Placed last due to credential export.
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.SERVER_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: '${{ secrets.AUTH_SA_NAME }}@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com'
      - name: Publish to gcp
        run: npm run publish-code -- -q
        working-directory: ${{ matrix.server }}/lib
  
  # Finally create release with artifacts 
  create-release:
    runs-on: ubuntu-latest
    environment: nightly
    needs: ['web-app','servers']
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Create release with artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./server-*.tar
            ./web-*.tar